module spi_host(
		input wire clk,
		input wire rst,

		input wire[7:0] clk_div,
		input wire cpol,
		input wire cpha,

		output reg sck,
		output wire mosi,
		input wire miso,

		input wire transfer_req,
		output wire transfer_ready,
		output wire transfer_done,
		input wire[7:0] to_agent,
		output wire[7:0] from_agent);
		
	wire timer_pulse;
	wire last_cycle;
	
	reg[3:0] cycle_count;
	reg[7:0] timer;
	reg transfer_active;
	
	assign timer_pulse = ~|timer;
	assign last_cycle = &cycle_count;
	
	always @(posedge clk or posedge rst)
	begin
		if(rst)
		begin
			cycle_count <= 4'hF;
			timer <= 8'h00;
			transfer_active <= 1'b0;
		end
		else
		begin
			if(last_cycle & transfer_req)
				cycle_count <= 4'h0;
			else if(~last_cycle & timer_pulse)
				cycle_count <= cycle_count + 4'h1;
			
			if(timer == clk_div || !transfer_active)
				timer <= 8'h0;
			else
				timer <= timer + 8'h01;

			if(last_cycle)
				transfer_active <= transfer_req;
		end
	end
		
endmodule
